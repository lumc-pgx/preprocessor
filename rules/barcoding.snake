def lima_param_string():
    """
    Convert config settings to a parameter string for feeding to lima command line
    :return: A string containing the formatted parameters
    """
    config_params = config["STAGE_PARAMS"].get("LIMA", {})
    
    if not config_params.get("num-threads", False):
        config_params["num-threads"] = 1
    
    def parse_param(pair):
        """Parse a config entry from the config file"""
        # convert boolean to flag
        if pair[1] is True:
            return [pair[0]]
    
        if pair[1] is False:
            return []
    
        return pair
        
    return " ".join(["--"+" ".join([str(x) for x in parse_param([*i])]) for i in config_params.items()])


rule barcoding:
    """
    Create barcoded bam file from subreads bam file using lima
    """
    input:
        subreads = "preprocessor/basecalls/{moviename}.subreads.bam",
        barcodes = config["BARCODES"]
    output:
        bam = "preprocessor/barcoded_subreads/{moviename}.bam",
        counts = "preprocessor/barcoded_subreads/{moviename}.lima.counts",
        report = "preprocessor/barcoded_subreads/{moviename}.lima.report",
        summary = "preprocessor/barcoded_subreads/{moviename}.lima.summary",
        subreadset = "preprocessor/barcoded_subreads/{moviename}.subreadset.xml"
    params:
        lima_params = lima_param_string()
    threads:
        config.get("STAGE_PARAMS", {}).get("LIMA", {}).get("num-threads", 1)
    conda:
        "../envs/pbtools.yaml"
    shell:
        "lima {params.lima_params} {input.subreads} {input.barcodes} {output.bam}"

import os
import glob
import yaml
import datetime

# yaml representer for dumping config
from yaml.representer import Representer
import collections

class Preprocessing(object):
    def __init__(self, config, workflow_name):
        self.config = config
        self.workflow_name = workflow_name

        barcode_ids = yaml.load(config.get("BARCODE_IDS", "[]"))

        try:
            with open(config["BARCODES"], "r") as bc_file:
                barcode_file_ids = [line.strip()[1:] for line in bc_file if line.startswith(">")]
        except (KeyError, IOError):
            barcode_file_ids = []

        if len(barcode_ids) and len(barcode_file_ids):
            assert all((x in barcode_file_ids for x in barcode_ids)), "barcode id not in barcode file"

        self.BARCODE_IDS = barcode_ids if len(barcode_ids) else barcode_file_ids

    
    @property
    def outputs(self):
        # determine the files to be generated depending on which stages are to be run
        do_LAA = config.get("STAGE_PARAMS", {}).get("LAA", False)
        do_CCS = config.get("STAGE_PARAMS", {}).get("CCS", False)
        do_CCS_check = config.get("STAGE_PARAMS", {}).get("CCS_CHECK", False) and do_LAA and do_CCS
        
        targets = []
        if do_LAA:
            targets.append("preprocessor/summary/LAA/laa_summary.csv")
            targets += expand("preprocessor/LAA/{barcodes}.fasta", barcodes=self.BARCODE_IDS)

        if do_CCS:
            targets += expand("preprocessor/CCS/{barcodes}.bam", barcodes=self.BARCODE_IDS)

        if do_CCS_check:
            targets += expand("preprocessor/summary/ccs_check/{barcodes}.html", barcodes=self.BARCODE_IDS)

        return targets


    # handlers for workflow exit status
    def onsuccess(self):
        print("{} workflow completed successfully".format(self.workflow_name))
        yaml.add_representer(collections.OrderedDict, Representer.represent_dict)
        config_file = "config.{}.yaml".format("{:%Y-%m-%d_%H:%M:%S}".format(datetime.datetime.now()))
        with open(config_file, "w") as outfile:
            print(yaml.dump(self.config, default_flow_style=False), file=outfile)

    def onerror(self):
        print("Error encountered while executing workflow")
        shell("cat {log}")


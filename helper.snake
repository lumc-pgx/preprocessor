import os
import glob
import yaml
import datetime

# yaml representer for dumping config
from yaml.representer import Representer
import collections

class Preprocessing(object):
    def __init__(self, config, workflow_name):
        self.config = config
        self.workflow_name = workflow_name

        self.PLATFORM = config.get("SEQUENCING_PLATFORM", "RS2").upper()
        assert self.PLATFORM in ("RS2", "SEQUEL"), "Invalid sequencing platform specified"

        if self.PLATFORM == "RS2":
            self.BASECALLS = [sorted(glob.glob(pth + "/*.bax.h5")) for pth in config["SOURCE_DATA_PATHS"]]
        else:
            self.BASECALLS = [sorted(glob.glob(pth + "/*.bam")) for pth in config["SOURCE_DATA_PATHS"]]

        self.MOVIES = [os.path.basename(self.BASECALLS[i][0]).split(".")[0] for i in range(len(self.BASECALLS))]

        barcode_ids = yaml.load(config.get("BARCODE_IDS", "[]"))

        try:
            with open(config["BARCODES"], "r") as bc_file:
                barcode_file_ids = [line.strip()[1:] for line in bc_file if line.startswith(">")]
        except IOError:
            barcode_file_ids = []

        if len(barcode_ids) and len(barcode_file_ids):
            assert all((x in barcode_file_ids for x in barcode_ids)), "barcode id not in barcode file"

        self.BARCODE_IDS = barcode_ids if len(barcode_ids) else barcode_file_ids

        # determine the files to be generated depending on which stages are to be run
        self.TARGET_FILES = []
        if config.get("STAGE_PARAMS", {}).get("LAA", False):
            self.TARGET_FILES.append("summary/LAA/laa_summary.csv")
            self.TARGET_FILES += expand("LAA/{barcodes}.fasta", barcodes=self.BARCODE_IDS)

        if config.get("STAGE_PARAMS", {}).get("CCS", False):
            self.TARGET_FILES += expand("CCS/{barcodes}.bam", barcodes=self.BARCODE_IDS)

        if config.get("STAGE_PARAMS", {}).get("CCS_CHECK", False):
            self.TARGET_FILES += expand("summary/ccs_check/{barcodes}.html", barcodes=self.BARCODE_IDS)


    @property
    def inputs(self):
        return self.BASECALLS

    @property
    def outputs(self):
        return self.TARGET_FILES

    # utility functions
    @staticmethod
    def parse_param(config_pair):
        """
        Parse a config entry from the config file
        """
    
        # convert boolean to flag
        if config_pair[1] is True:
            return [config_pair[0]]
    
        if config_pair[1] is False:
            return []
    
        return config_pair

    @staticmethod
    def tool_param_string(config_dict):
        """
        Convert config settings to a parameter string for feeding to command line tools
        :param config_dict: portion of the config which contains the params
        :return: A string containing the formatted parameters
        """
        return " ".join(["--"+" ".join([str(x) for x in Preprocessing.parse_param([i, config_dict[i]])]) for i in config_dict])


    # handlers for workflow exit status
    def onsuccess(self):
        print("{} workflow completed successfully".format(self.workflow_name))
        yaml.add_representer(collections.OrderedDict, Representer.represent_dict)
        config_file = "config.{}.yaml".format("{:%Y-%m-%d_%H:%M:%S}".format(datetime.datetime.now()))
        with open(config_file, "w") as outfile:
            print(yaml.dump(self.config, default_flow_style=False), file=outfile)

    def onerror(self):
        print("Error encountered while executing workflow")
        shell("cat {log}")

